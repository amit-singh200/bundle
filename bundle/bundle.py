from __future__ import absolute_import
from __future__ import with_statement

import os
import sys

from contextlib import contextmanager
from shutil import rmtree
from string import Template
from subprocess import Popen, PIPE
from tempfile import mkdtemp, NamedTemporaryFile

from . import __version__
from . import files


@contextmanager
def changedir(new):
    prev = os.getcwd()
    os.chdir(new)
    yield new
    os.chdir(prev)


def say(m):
    sys.stderr.write("%s\n" % (m, ))


class Bundle(object):

    def __init__(self, name, description=None, requires=None, version=None,
            author=None, author_email=None, url=None, platforms=None,
            license=None, setup_template=None, readme_template=None):
        self.name = name
        self.description = description or "autogenerated bundle"
        self.requires = requires or []
        self.version = version or "1.0"
        self.author = author or ""
        self.author_email = author_email or ""
        self.url = url or ""
        self.platforms = platforms or ["all"]
        self.license = license or "BSD"
        self._setup_template = setup_template
        self._readme_template = readme_template

    def render_setup(self):
        return Template(self.setup_template).substitute(**self.stash)

    def render_readme(self):
        return Template(self.readme_template).substitute(**self.stash)

    @contextmanager
    def temporary_dir(self):
        dirname = mkdtemp()
        yield dirname
        rmtree(dirname)

    @contextmanager
    def render_to_temp(self):
        with self.temporary_dir() as dir:
            with NamedTemporaryFile(dir=dir, suffix=".py") as setup:
                with changedir(dir):
                    setup.write(self.render_setup())
                    setup.flush()
                    with open("README", "w") as readme:
                        readme.write(self.render_readme())
                    yield setup.name
            rmtree(tempdir)

    def upload(self):
        with self.render_to_temp() as setup_name:
                say(Popen([sys.executable, setup_name] + self.upload_args,
                           stdout=PIPE).communicate()[0])

    @property
    def upload_args(self):
        return ["register", "sdist", "upload"]

    @property
    def stash(self):
        title = " - ".join([self.name, self.description])
        return dict(self.__dict__, title=title,
                                   title_h1='=' * len(title),
                                   bundle_version=__version__)

    @property
    def setup_template(self):
        if self._setup_template is None:
            self._setup_template = files.slurp("setup.py.t")
        return self._setup_template

    @property
    def readme_template(self):
        if self._readme_template is None:
            self._readme_template = files.slurp("README.t")
        return self._readme_template
